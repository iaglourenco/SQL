--EXERCICIOS DE SQ1L 26/04/19
--IAGO LOURENÇO 15610116


CREATE TABLE NOTA (NUMERO NUMBER, DATA_NOTA DATE, PESO_TOTAL NUMBER, VALOR_TOTAL NUMBER);
ALTER TABLE NOTA ADD CONSTRAINT PK_NOTA PRIMARY KEY (NUMERO);

CREATE TABLE PRODUTO (CODIGO NUMBER , DESCRICAO VARCHAR2(20), VALOR_UNITARIO NUMBER , PESO_UNITARIO NUMBER);
ALTER TABLE PRODUTO ADD CONSTRAINT PK_PRODUTO  PRIMARY KEY (CODIGO);

CREATE TABLE ITEM (NUMERO_NOTA  NUMBER, ITEM NUMBER , COD_PRODUTO NUMBER,  QTDE NUMBER,  VALOR_ITEM  NUMBER);
ALTER TABLE ITEM ADD CONSTRAINT PK_ITEM PRIMARY KEY (NUMERO_NOTA, ITEM);
ALTER TABLE ITEM ADD CONSTRAINT FK_ITEM_NOTA FOREIGN KEY (NUMERO_NOTA) REFERENCES NOTA;
ALTER TABLE ITEM ADD CONSTRAINT FK_ITEM_PRODUTO FOREIGN KEY (COD_PRODUTO) REFERENCES PRODUTO;



CREATE TABLE NOTA_COPIA (NUMERO NUMBER, DATA_NOTA DATE, PESO_TOTAL NUMBER, VALOR_TOTAL NUMBER);
ALTER TABLE NOTA_COPIA ADD CONSTRAINT PK_NOTA PRIMARY KEY (NUMERO);

CREATE TABLE ITEM_COPIA (NUMERO_NOTA  NUMBER, ITEM NUMBER , COD_PRODUTO NUMBER,  QTDE NUMBER,  VALOR_ITEM  NUMBER);
ALTER TABLE ITEM_COPIA ADD CONSTRAINT PK_ITEM PRIMARY KEY (NUMERO_NOTA, ITEM);
ALTER TABLE ITEM_COPIA ADD CONSTRAINT FK_ITEM_NOTA FOREIGN KEY (NUMERO_NOTA) REFERENCES NOTA_COPIA;
ALTER TABLE ITEM_COPIA ADD CONSTRAINT FK_ITEM_PRODUTO FOREIGN KEY (COD_PRODUTO) REFERENCES PRODUTO;



INSERT INTO NOTA VALUES(1,TO_DATE('16/04/18','DD/MM/YY'),100,500); 
INSERT INTO NOTA VALUES(2,TO_DATE('25/06/18','DD/MM/YY'),140,5200); 
INSERT INTO NOTA VALUES(3,TO_DATE('01/10/18','DD/MM/YY'),190,1500);
INSERT INTO NOTA VALUES(4,TO_DATE('10/11/18','DD/MM/YY'),100,1000);

INSERT INTO PRODUTO VALUES(1,'COMPUTADOR',2300,1000); 
INSERT INTO PRODUTO VALUES(2,'GELADEIRA',1300,10000); 
INSERT INTO PRODUTO VALUES(3,'ARMARIO',800,8000);
INSERT INTO PRODUTO VALUES(4,'FOGAO',900,10000);


INSERT INTO ITEM VALUES(1,0001,1,100,16); 
INSERT INTO ITEM VALUES(2,0002,2,100,6); 
INSERT INTO ITEM VALUES(3,0003,3,100,37); 
INSERT INTO ITEM VALUES(4,0004,4,100,37); 




--Crie uma função que, dado o “Numero da Nota”, retorne o código do produto de maior valor unitário constante desta nota
CREATE OR REPLACE FUNCTION MAX_PRODUTO(N_NOTA NUMBER) RETURN NUMBER IS 
CODIGO_PROD NUMBER;
VALOR NUMBER;
BEGIN	
	VALOR:=0;
	FOR SITEM IN (SELECT * FROM ITEM)
	LOOP
	
	IF SITEM.NUMERO_NOTA = N_NOTA THEN
		
		IF SITEM.VALOR_ITEM > VALOR THEN
			
			VALOR := SITEM.VALOR_ITEM ;
			CODIGO_PROD := SITEM.COD_PRODUTO;
		
		END IF;
	
	END IF;
    END LOOP;
	RETURN(CODIGO_PROD);
END;
/




--Crie uma Trigger que sirva para atualizar o Valor_Item na tabela ITEM e o Valor_Total da tabela NOTA, sempre que uma  nova linha for inserida na tabela ITEM 
CREATE OR REPLACE TRIGGER ATT_VALOR_ITEM_NOTA AFTER INSERT ON ITEM FOR EACH ROW
BEGIN

	UPDATE NOTA SET VALOR_TOTAL= :NEW.VALOR_ITEM * :NEW.QTDE WHERE NUMERO=:NEW.NUMERO_NOTA;

END;
/


--Crie uma Procedure que copie para as tabelas NOTA_COPIA e ITEM_COPIA, 
--o conteúdo das notas fiscais e seus itens  para as Notas  com data inferior a X dias dia dia de hoje, onde X será passado como parâmetro. 
--As linhas copiadas para as tabelas NOTA_COPIA e ITEM_COPIA deverão ser posteriormente deletadas das tabelas originais.
CREATE OR REPLACE PROCEDURE COPIA_TABELA(DIAS NUMBER) AS
BEGIN

FOR LNOTA,LITEM IN (SELECT * FROM NOTA,ITEM WHERE (TRUNC(NOTA.DATA_NOTA)) < DIAS) 
LOOP
	INSERT INTO NOTA_COPIA VALUES(LNOTA.NUMERO,LNOTA.DATA_NOTA,L.LNOTA.PESO_TOTAL,LNOTA.VALOR_TOTAL);
	INSERT INTO ITEM_COPIA VALUES(LITEM.NUMERO_NOTA,LITEM.ITEM,LITEM.COD_PRODUTO,LITEM.QTDE,LITEM.VALOR_ITEM);

	DELETE FROM NOTA WHERE NUMERO=LNOTA.NUMERO;
	DELETE FROM ITEM WHERE NUMERO_NOTA=LITEM.NUMERO;


LOOP END;


END;
/


